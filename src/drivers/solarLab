#!/usr/bin/env python
# -*- coding: utf-8 -*-

import math
import time
import rospy
import std_msgs
import sensor_msgs
import geometry_msgs
from geometry_msgs.msg import Point
import arom
import axis
from __init__ import AromNode

btn_data = []

def callback_btn(recive):
    print recive
    global btn_data
    btn_data.append(recive.data)
    #print recive, btn_data


class SolarLab(AromNode):
    node_name = "sun_controller"
    node_type = "asu_solar"
    node_pymlab = True

    def __init__(self):

        self.speedA = 0
        self.speedB = 0
        self.speedC = 0
        self.sunpos = None
        self.btn_data = []

        rospy.Subscriber("/arom/UI/buttons", std_msgs.msg.String, self.callback_btn)
        rospy.Subscriber("/sun_pos", Point, self.callback_sunpos)
        rospy.Subscriber("/sun_err", Point, self.callback_sunerr)

        self.pub_imagetarget = rospy.Publisher("/image_target", Point, queue_size=1)
        self.pub_imagecommand= rospy.Publisher("/image_command", std_msgs.msg.String, queue_size=5)

        #rospy.Subscriber("sun_pos", geometry_msgs.msg.Point, self.callback_sunpos)


        AromNode.__init__(self)
        self.pymlab = rospy.ServiceProxy('pymlab_drive', arom.srv.PymlabDrive)
        #self.set_feature('gpio_set_port',{'ports': 8, 'devices': str(self.devices0) ,'subscrib': '/gpio/gpio_mount'})
        #self.set_feature('gpio_all_off',{'subscrib': '/gpio/gpio_mount', 'msg': 'off'})

        #self.pymlab(device="gpio_mount", method="config_ports", parameters=str(dict(port0 = self.config0, port1 = self.config1)))
        
        #rospy.Timer(rospy.Duration(2), self.send_status, oneshot=False)

        self.motor_a = axis.axis(SPI = self.pymlab, SPI_CS = 0b0001, Direction = True, StepsPerUnit = 1, protocol = 'arom', arom_spi_name = 'telescope_spi')
        self.motor_b = axis.axis(SPI = self.pymlab, SPI_CS = 0b0010, Direction = True, StepsPerUnit = 1, protocol = 'arom', arom_spi_name = 'telescope_spi')
        #self.motor_c = axis(SPI = self.pymlab, SPI_CS = 0b0010, Direction = True, StepsPerUnit = 1, protocol = 'arom', arom_spi_name = 'telescope_spi2')


        rate = rospy.Rate(10)
        while not rospy.is_shutdown():
            try:

                if len(self.btn_data) > 0:
                    print self.btn_data[0], len(self.btn_data)
                    lastBtn = self.btn_data[0]
                    last_data = lastBtn.split(" ")
                    self.btn_data.pop(0)

                    print "incomming:", last_data

                    if last_data[0] == 'KEY_LEFT':
                        self.pub_imagecommand.publish("pause")
                        self.speedA -= 10
                        self.motor_a.Run(0, self.speedA)

                    elif last_data[0] == 'KEY_RIGHT':
                        self.pub_imagecommand.publish("pause")
                        self.speedA += 10
                        self.motor_a.Run(0, self.speedA)

                    elif last_data[0] == 'KEY_UP':
                        self.pub_imagecommand.publish("pause")
                        self.speedB -= 10
                        self.motor_b.Run(0, self.speedB)

                    elif last_data[0] == 'KEY_DOWN':
                        self.pub_imagecommand.publish("pause")
                        self.speedB += 10
                        self.motor_b.Run(0, self.speedB)

                    elif last_data[0] == 'KEY_OK':
                        print self.sunpos
                        self.pub_imagetarget.publish(self.sunpos)
                        self.speedA = 0
                        self.speedB = 0
                        self.motor_a.Run(0, self.speedA)
                        self.motor_b.Run(0, self.speedB)
                        self.pub_imagecommand.publish("start")

                    elif last_data[0] == 'KEY_SEARCH': # MUTE button - vse zastavi (vcetne hodinoveho stroje)
                        self.motor_a.Float()
                        self.motor_b.Float()
                        self.pub_imagecommand.publish("stop")
                        self.speedA = 0
                        self.speedB = 0

                    elif last_data[0] == 'KEY_MENU': # HOME button - navrati coelostat do polohy, kde bude 'prenocovavat'
                        self.pub_imagecommand.publish("recenter")

                    elif last_data[0] == 'KEY_REWIND': # MENU - None
                        pass

                    elif last_data[0] == 'KEY_FORWARD': # BACK - vyresetuje nastavení, vycentruje obraz na střed
                        self.pub_imagecommand.publish("recenter")

                    elif last_data[0] == 'KEY_BACK': # - - None
                        pass

                    elif last_data[0] == 'KEY_NEXT': # + - None
                        pass

                    #self.pymlab(device="gpio_mount", method="set_ports", parameters=str(dict(port0 = self.port0, port1= self.port1)))

            except Exception, e:
                print e
            rate.sleep()



    def callback_btn(self, recive):
        print recive
        self.btn_data.append(recive.data)
        #print recive, btn_data

    def callback_sunerr(self, recive):
        pass
        #print recive
        #self.btn_data.append(recive.data)
        #print recive, btn_data

    def callback_sunpos(self, recive):
        #print recive
        self.sunpos = recive


if __name__ == '__main__':
    m = SolarLab()