#!/usr/bin/env python
# -*- coding: utf-8 -*-


#new wrapper with piggyphoto
#

import math
import time
import datetime
import rospy
import std_msgs
import sensor_msgs
import actionlib
import json
import arom
import camera_astro
import cv2
from cv_bridge import CvBridge, CvBridgeError
import numpy as np

import os
import piggyphoto


class AstroCamCanon(camera_astro.AstroCam):
    node_name = "CanonCamera"
    node_type = "AstroCam"

    def __init__(self):
        print "init AstroCamCanon"
        #rospy.init_node('camera_astro_canon')

        self.connect()
        camera_astro.AstroCam.__init__(self)

    def connect(self):
        print "connect"
        self.camera = piggyphoto.Camera()
        self.conf_list = self.camera.list_config()
        self.conf_dict = {}
        self.getSetting()
        print "End connect"

    def setFocuser(self, name = None, type = None):
        raise NotImplementedError

    def setCamera(self, id = None):
        raise NotImplementedError

    def getCameraInfo(self):
        raise NotImplementedError

    def getCameralist(self):
        raise NotImplementedError

    def getSetting(self, name = None):
        for config in self.conf_list:
            try:

                cfg = {}
                #print config,

                cfg["value"] = eval('self.camera.config.'+config+'.value')
                cfg["choices"] = eval('self.camera.config.'+config+'.choices')
                #exec 'cfg["value"] = self.camera.config.'+config+'.value'
                #exec 'cfg["choices"] = self.camera.config.'+config+'.choices'
                cfg["type"] = 'select'
                #print cfg
                self.conf_dict[str(config)] = cfg

            except Exception as e:
                print "getConfig>>", e
            
        rospy.set_param('/arom/node%s/feature/%s/config' %(str(rospy.get_name()),'cam_controll'), self.conf_dict)
        print "***********************"

    def setConfig(self, data = None):
        print data
        print self.camera.abilities
        print "================================"
        print data.param.rsplit('.', 1)[-1], data.value

        cc = self.camera.config
        param = cc.get_child_by_name(data.param.rsplit('.', 1)[-1])
        print param
        print param.value
        param.value = str(data.value)
        self.camera.config = cc
        print "----------overeni"
        cc = self.camera.config
        param = cc.get_child_by_name(data.param.rsplit('.', 1)[-1])
        print param
        print param.value



        #self.camera.set_config(data.param, data.value)
        

    def capture(self, n=1, camera = None, exposition = None, iso = None, focus = None, Zoom = None, save = True, publish = False, name = None, preview = False):
        try:
            self.camera.capture_image('/home/odroid/storage/snap_'+datetime.datetime.now().strftime('%Y%m%d-%H%M%S')+'.cr2')
            print "done"
            
        except Exception, e:
            rospy.logerr(e)
            return False


    def setStream(self, value):
        self.stream = bool(value)



    def streamLoop(self):
        print "loop"
        # zkusit to touto cestou https://github.com/alexdu/piggyphoto/issues/2#issuecomment-91809942
        #
        # protoze fce capture_preview vraci nejaky cfile
        cfile = self.camera.capture_preview()
        data = cfile.get_data()
        nparr = np.fromstring(data, np.uint8)
        frame = cv2.imdecode(nparr, cv2.CV_LOAD_IMAGE_COLOR) # cv2.IMREAD_COLOR in OpenCV 3.1
        self.pub_image.publish(self.bridge.cv2_to_imgmsg(frame, "bgr8"))
        #del frame
        #time.sleep(0.3)

    def exit(self):
        #del self.camera
        print "ukoncuji program a odpojuji se od kamery"

    
if __name__ == '__main__':
    AstroCamCanon()